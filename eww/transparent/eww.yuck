
;;WINDOW MANAGER HYPRLAND
(deflisten window :initial "..." "./scripts/wayland/get-window-title.sh")
(deflisten workspaces :initial "[]" "./scripts/wayland/get-workspaces.sh")
(deflisten current_workspace :initial "1" "./scripts/wayland/get-active-workspace.sh")

;;MISC
;;(defvar EWW_CMD "/usr/bin/eww -c $HOME/personal/confs/eww/sidebar/slide")

;;ICONS
(defvar ARCH_ICON 			"")
(defvar KEYBOARD_ICON 	"")
(defvar BRIGHTNESS_ICON "󰃞")
(defvar VOLUME_ICON 		"󰕾")
(defvar POWER_ICON 			"")
(defvar RESTART_ICON 		"")
(defvar SLEEP_ICON 			"")
(defvar SIGNOUT_ICON 		"")
(defvar WIFI_ICON 			"")	
(defvar NETDOWN_ICON 		"")
(defvar NETUP_ICON 			"")
(defvar USER_ICON 			"")
(defvar SHELL_ICON 			"󰨊")
(defvar KERNEL_ICON 		"󰬒")
(defvar PACKAGES_ICON 	"")
(defvar UPTIME_ICON 		"󰥔")
(defvar MEM_ICON 				"󰍛")
(defvar BAT_ICON 				"󰁹")
(defvar TEMP_ICON 			"󰔄")
(defvar DISK_ICON 			"󰋊")
(defvar BROWSER_ICON 		"")
(defvar TMUX_ICON 			"")
(defvar STATUS_ICON 		"")
(defvar GITHUB_ICON 		"")
(defvar PROXY_ICON 			"󰒃")
(defvar TURBO_ICON 			"󱐋")
(defvar FOLDER_ICON 		"")

;;SWITCHES
(defvar p false)
(defvar v false)
(defvar b false)
(defvar c false)
(defvar s true)

;;CARDINFO
(deflisten NAME 	:initial 	 "" "whoami")
(deflisten SHELL  :initial   "" "echo $SHELL") 
(deflisten KERNEL 	:initial   ""  "uname -a | awk '{print $3}'")
(defpoll UPTIME 	:interval "60s" "uptime | awk '{print $3}' | awk -F, '{print $1}'")
(defpoll PACKAGES :interval "8600s" "pacman -Qq | wc -l")

;;FOLDERS
(defvar DOWNLOADS 		"st -e nnn -deoP p ~/downloads &")
(defvar PICTURES 			"st -e nnn -deoP p ~/pictures &")
(defvar CONFIGS 			"st -e nnn -deoP p ~/.config &")
(defvar DEVELOPMENT 	"st -e nnn -deoP p ~/personal/development &")
(defvar PERSONAL 			"st -e nnn -deoP p ~/personal &")

;;SHORTCUTS
(defvar BROWSER "firefox &")
(defvar GITHUB  "firefox https://github.com/ghostuser268?tab=repositories &")
(defvar STATUS  "st -e btop &")
(defvar TMUX 		"st -e tmux &")
(defvar VPN 		"outline-client &")
(defvar TURBO		"./scripts/turbo.sh")

(defvar SHUTDOWN 	"systemctl poweroff")
(defvar RESTART 	"systemctl reboot")
(defvar SLEEP 		"systemctl suspend")
(defvar SIGNOUT 	"pkill Hyprland")


;;STATUSES
(defvar VOLUME "if [[ '{}' == 'up' ]];then amixer -qc 1 set Master 10%+ unmute;else amixer -qc 1 set Master 10%- unmute;fi")
(defvar VOL_LEFT_CLICK  "./scripts/volume.sh --config ~/personal/confs/eww/transparent/")
(defvar VOL_UPDATE "amixer -qc 1 set Master {}%")
(defvar VOL_RIGHT_CLICK  "st -e alsamixer&")
(defvar NET_RIGHT_CLICK "st -e nmtui&")
(defvar BRI_UPDATE "xbacklight -set {}")
(defpoll WIFI_NAME :interval "60s" "nmcli | awk '/wlp1s0/{print $4}'")

;;(defpoll DISKUSAGE_OLD 	:interval "60s" `df -h | awk ' /nvme0n1p9/  {printf $3"  |  "$2}'`)
;;(defpoll DISKUSAGE 	:interval "60s" `df -h | awk ' /nvme0n1p9/  {printf $3}'`)
(defpoll DISKPERC 	:interval "60s" "./scripts/stats.sh disk_perc")
(defpoll MEMORY 	:interval "1s"  "./scripts/stats.sh memory single"	)
(defpoll BATTERY 	:interval "60s" "./scripts/stats.sh battery"				)
;;(defpoll NET 			:interval "5s"  "./scripts/net.sh"									)
;;(defpoll NETDOWN 	:interval "5s"  "./scripts/net.sh down"						)
;;(defpoll NETPRE		:interval "5s"  "./scripts/net.sh pre"							)

(defpoll CURRENT_VOL :interval "1s"  "amixer -c 1 sget Master | awk '/Mono/ {printf $4}' | tr -d '\[%\]'" )
(defpoll CURRENT_BRI 	:interval "1s"  "xbacklight -get" )
(defpoll CPU 			:interval "1s"  "./scripts/stats.sh cpu_temp"			)
(defpoll GPU 			:interval "1s"  "./scripts/stats.sh gpu_temp"			)

;;TIME
(defpoll DAY 			:interval "86400s" `date +%d`)
(defpoll MONTH 		:interval "86400s" `date +%m`)
(defpoll YEAR 		:interval "86400s" `date +%y`)

(defpoll DATE 		:interval "86400s" `date +%M`)
(defpoll TIME 		:interval "1s" `date +%X`)
(defpoll HOUR 		:interval "1s" `date +%H`)
(defpoll MINUTES 	:interval "1s" `date +%M`)

(defwindow bar :monitor 0 :geometry (geometry :x "0%" :y "0%" :width "100%" :height "30px" :anchor "bottom center") :stacking "fg" :windowtype "dock" :exclusive true :wm-ignore false (bar))
(defwindow slide :monitor 0 :geometry (geometry :x "0%" :y "0%" :width "100%" :height "100%" :anchor "bottom center") :stacking "fg" :windowtype "dock" :exclusive true :wm-ignore true (slide))
(defwindow calendar :monitor 0 :geometry (geometry :x "0%" :y "0%" :width "12%" :height "15%" :anchor "bottom right") (cal))
;;(defwindow slide :monitor 1 :geometry (geometry :x "0px" :y "0%" :width "300px" :height "100%" :anchor "left center") :stacking "fg" :windowtype "dock" :exclusive true :wm-ignore false (slide_menu))

(defwidget bar []
 (centerbox :orientation "h" 
  (box :class "segment-top" :valign "start" (top))
  (box :valign "center" :class "middle" (middle))
  (box :valign "end" :class "bottom" (bottom))
 )
)
(defwidget top []  
(eventbox :onscroll "./scripts/wayland/change-active-workspace.sh {} ${current_workspace}" :class "workspaces-widget"
  (box  :class "windows" :orientation "h" :space-evenly false :class "top"
	 (button :onclick {s == false ? "${EWW_CMD} open slide; ${EWW_CMD} update s=true" : "${EWW_CMD} close slide; ${EWW_CMD} update s=false" }	
			 (label :class "logo" :halign "center" :text  "${ARCH_ICON}" )
	 )
	 (box (label :angle 0 :show_truncated true :limit-width 90 :text "${window}")) 
  )
)
)
(defwidget middle [] 
(box  :orientation "h" (for workspace in workspaces 
     (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}" 
      (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}" 
       (label  :text "${workspace.id}")) )
			 )
	)
)
(defvar KEYBOARD_TOGGLED "./scripts/keyboard.sh --config ~/personal/confs/eww/transparent")
(defwidget bottom [] 
 (box :orientation "h" :space-evenly false :class "status" :halign "end"
 	 (box :class "status_item" :space-evenly false
			;;(label :text "${KEYBOARD_ICON} ")
			(button :onclick "${KEYBOARD_TOGGLED}" "${KEYBOARD_ICON} ")
	 )
	 (box :class "status_item" :space-evenly false
			(label :text "${VOLUME_ICON} ")
			(button :onclick "${VOL_RIGHT_CLICK}" "${CURRENT_VOL}%")
	 )
	 (box :class "status_item" :space-evenly false
			(label :text "${BRIGHTNESS_ICON} ")
			(label :text "${CURRENT_BRI}%")
	 )
 	 (box :class "status_item"  :space-evenly false
			(label :text "${DISK_ICON} ")
			(button :onclick "${STATUS}"  "${DISKPERC}%")

	 )
	 (box :class "status_item" :space-evenly false
			(label :text "${BAT_ICON} ")
			(label :text "${BATTERY}%")
	 )
	 (box :orientation "v" :space-evenly false :class "status_item" 
			(box :space-evenly false :halign "center"
				 (label :text "${NETUP_ICON}  ")
				 (button :onclick "${NET_RIGHT_CLICK}" "${round(EWW_NET['wlp1s0'].NET_UP/ 1000000, 2)}Mb ")
			)
			(box :space-evenly false :halign "center"
			 (label :text "${NETDOWN_ICON}  ")
			 (button :onclick "${NET_RIGHT_CLICK}" "${round(EWW_NET['wlp1s0'].NET_DOWN / 1000000, 2)}Mb  ")
			)
	 )
	 
	 (box :orientation "v" :space-evenly false :class "status_item"
				 (label :text "󰿊")
				 (label :text "󰿊")
	 )
	 (box :orientation "v" :space-evenly false :class "status_item"
			(label :text "${TIME}")
			(button :onclick {c == false ? "${EWW_CMD} open calendar; ${EWW_CMD} update c=true" : "${EWW_CMD} close calendar; ${EWW_CMD} update c=false" }
				(box :orientation "h" :class "date"
				 (label :text "${DAY}" :valign "right")
				 (label :text "|")
				 (label :text "${MONTH}" :valign "center")
				 (label :text "|")
				 (label :text "${YEAR}" :valign "center")
				)
			)
	 )
 )
)

(defwidget cal[] (box :class "cal-box" :orientation "v" (box :class "cal-inner-box" (calendar :class "cal" :day calendar_day :month calendar_month :year calendar_year))))
(defpoll calendar_day :interval "10h" "date '+%d'")
(defpoll calendar_month :interval "10h" "scripts/calendar")
(defpoll calendar_year :interval "10h" "date '+%Y'")

(defwidget slide[] 
 (box  :class "slide" :orientation "h"
  (box :valign "center" :class "slide_top"  (slide_left))
  (box :valign "center"  :class "slide_middle" (slide_middle))
  (box :valign "center" :class "slide_bottom" (slide_right))
 )
)

(defwidget slide_left[] (box :orientation "h" :class "slide_left"
 (box :orientation "v" :class "sl_box"
	(button :onclick "${BROWSER}"	 "${BROWSER_ICON}") 
	(button :onclick "${TMUX}"				 "${TMUX_ICON}") 
	(button :onclick "${STATUS}"			"${STATUS_ICON}") 
	(button :onclick "${GITHUB}"			"${GITHUB_ICON}")
	(button :onclick "${VPN}"				 "${PROXY_ICON}") 
	(button :onclick "${TURBO}"			"${TURBO_ICON}") 
 )
 (box :orientation "v" :class "sl_box"
	(button :onclick "${BROWSER}"	 "${BROWSER_ICON}") 
	(button :onclick "${TMUX}"				 "${TMUX_ICON}") 
	(button :onclick "${STATUS}"			"${STATUS_ICON}") 
	(button :onclick "${GITHUB}"			"${GITHUB_ICON}")
	(button :onclick "${VPN}"				 "${PROXY_ICON}") 
	(button :onclick "${TURBO}"			"${TURBO_ICON}") 
 )


))
(defwidget slide_middle[] (box 

(label :text "middle")
))
(defwidget slide_right[] (label :text "right"))

