(defvar DOWNLOADS 	"./scripts/launch.sh;st -e nnn -deoP p ~/downloads &")
(defvar PICTURES 	"./scripts/launch.sh;st -e nnn -deoP p ~/pictures &")
(defvar CONFIGS 	"./scripts/launch.sh;st -e nnn -deoP p ~/.config &")
(defvar DEVELOPMENT 	"./scripts/launch.sh;st -e nnn -deoP p ~/personal/development &")
(defvar PERSONAL 	"./scripts/launch.sh;st -e nnn -deoP p ~/personal &")

(defvar SHUTDOWN 	"./scripts/launch.sh;systemctl poweroff")
(defvar RESTART 	"./scripts/launch.sh;systemctl reboot")
(defvar SLEEP 		"./scripts/launch.sh;systemctl suspend")
(defvar SIGNOUT 	"./scripts/launch.sh;pkill Hyprland")

(defvar BROWSER "./scripts/launch.sh;firefox &")
(defvar GITHUB  "./scripts/launch.sh;firefox https://github.com/ghostuser268?tab=repositories &")
(defvar STATUS  "./scripts/launch.sh;st -e btop &")
(defvar TMUX 	"./scripts/launch.sh;st -e tmux &")
(defvar VPN 	"./scripts/launch.sh;outline-client &")
(defvar TURBO	"./scripts/launch.sh;./scripts/turbo.sh")

(defpoll DISKUSAGE 	:interval "60s" `df -h | awk ' /nvme0n1p9/  {printf $3"  |  "$2}'`)

(defvar VOLUME " if [[ '{}' == 'up' ]];then amixer -qc 1 set Master 10%+ unmute;notify-send `amixer -c 1 sget Master | awk '/Mono/ {printf $4}'` ;else amixer -qc 1 set Master 10%- unmute;notify-send `amixer -c 1 sget Master | awk '/Mono/ {printf $4}'` ;fi")
(defvar BRIGHTNESS_ICON "󰃞")
(defvar VOLUME_ICON "󰕾")
(defvar VOLUPDATE "amixer -qc 1 set Master {}%")
(defvar VOLCLICK  "./scripts/volume.sh")
(defvar BRIUPDATE "xbacklight -set {}")
(defpoll current_volume :interval "1s"  "amixer -c 1 sget Master | awk '/Mono/ {printf $4} '" )
(defpoll current_bri 	:interval "1s"  "xbacklight -get" )

(defpoll CPU 		:interval "1s"  "./scripts/stats.sh cpu_temp")
(defpoll GPU 		:interval "1s"  "./scripts/stats.sh gpu_temp")
(defpoll MEMORY 	:interval "1s"  "./scripts/stats.sh memory single")
(defpoll BATTERY 	:interval "1s"  "./scripts/stats.sh battery")
(defpoll NET 		:interval "5s"  "./scripts/net.sh")
(defpoll NETDOWN 	:interval "5s"  "./scripts/net.sh down")
(defpoll NETPRE		:interval "5s"  "./scripts/net.sh pre")

(defpoll DATE :interval "1s" `date +%D`)
(defpoll TIME :interval "1s" `date +%X`)

(defvar CARDIMAGE "./images/car.png")
(defpoll NAME 	:interval "8600s" "whoami")
(defpoll SHELL  :interval "8600s" "echo $SHELL") 
(defpoll KERNEL :interval "8600s"  "uname -a | awk '{print $3}'")
(defpoll UPTIME :interval "60s" "uptime | awk '{print $3}' | awk -F, '{print $1}'")
(defpoll PACKAGES :interval "8600s" "pacman -Qq | wc -l")

(deflisten window :initial "..." "./scripts/wayland/get-window-title.sh")
(deflisten workspaces :initial "[]" "./scripts/wayland/get-workspaces.sh")
(deflisten current_workspace :initial "1" "./scripts/wayland/get-active-workspace.sh")

;;(defwindow background :monitor 0 :geometry (geometry :x "0" :y "0" :width "100%" :height "100%")
;;(box :style  "background-image: url('./images/b-modified.png'); background-size:100%;"))


(defwindow workspaces 	:monitor 0 :geometry (geometry :x "20%"	:y "20%" :width "30%" :height "5%") 		(workspaces)	) 
(defwindow window_w 	:monitor 0 :geometry (geometry :x "50%" :y "20%" :width "30%" :height "5%") 		(window_w)	)
(defwindow shortcuts 	:monitor 0 :geometry (geometry :x "20%"  :y "25%" :width  "5%"  :height "50%") 		(shortcuts)	)
(defwindow filemanager 	:monitor 0 :geometry (geometry :x "25%" :y "25%" :width  "15%" :height "50%") 		(filemanager)	)
(defwindow volume 	:monitor 0 :geometry (geometry :x "40%" :y "25%" :width  "5%"  :height "50%") 		(volume)	) 
(defwindow brightness 	:monitor 0 :geometry (geometry :x "45%" :y "25%" :width  "5%"  :height "50%") 		(brightness)	) 
(defwindow info_card 	:monitor 0 :geometry (geometry :x "50%" :y "25%" :width "25%" :height "30%") 		(info_card)	) 
(defwindow sys_status 	:monitor 0 :geometry (geometry :x "50%" :y "55%" :width "25%" :height "20%") 		(sys_status)	) 
(defwindow power_strip 	:monitor 0 :geometry (geometry :x "75%"  :y "25%" :width  "5%"  :height "50%") 		(power_strip)	)

(defwidget workspaces []
  (eventbox :onscroll "./scripts/wayland/change-active-workspace.sh {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true :class "windows"
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}" 
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id}")
            )
          )
        )
      )
    )
  )
(defwidget window_w [] (box  (label :text "${window}")))

(defwidget info_card[]
 (box :orientation "h" :spacing 20 :class "info_card"
  (box :style "background-image: url('${CARDIMAGE}');" :class "info_card_image" :valign "center"  )
      (box :orientation "v"  :vexpand true :width UPTIME :space-evenly true
	 ( box  :orientation "h" :valign "center" :class "info_card_data"
	    (box :orientation "v" :halign "start" 
	       ( box :orientation "h" ( label :text "" ) ( label :text "${NAME}" :xalign 0.0))
	       ( box :orientation "h" ( label :text "󰨊" ) ( label :text "${SHELL}" :xalign 0.0))
	       ( box :orientation "h" ( label :text "󰬒" ) ( label :text "${KERNEL}" :xalign 0.0))
	       ( box :orientation "h" ( label :text "" ) ( label :text "${PACKAGES}" :xalign 0.0))
	       ( box :orientation "h" ( label :text "󰥔" ) ( label :text "${UPTIME}" :xalign 0.0))
	    )
	 )
      )
   )
)

(defwidget net[] (label :onclick "notify-send wifi" :text "${NET}"))

(defwidget sys_status[]
   (box :orientation "h"
      (box :orientation "h"
	 (box :orientation "v" :space-evenly false :valign "center"
	    (label :text "${NETPRE}" )

	    (graph :valign "end"
	       :value "${NETDOWN}"
	       :thickness 1
	       :height 100
	       :time-range "60s"
	       :min 0
	       :max 10
	       :dynamic true
	       :line-style "round"
	    )
	    (label :text "${NET}" :valign "start")
	 )
      )
      (box :orientation "h" :space-evenly false :class "sys_status" :halign "center" :valign "center"
	 (box :orientation "v" :space-evenly false :valign "start" 
	    (scale :orientation "v" :flipped true :min 0 :max 120 :value "${CPU}" :tooltip "${CPU}")
	    (label :text "C")
	 )
	 (box :orientation "v" :space-evenly false :valign "start" 
	    (scale :orientation "v" :flipped true :min 0 :max 120 :value "${GPU}" :tooltip "${GPU}")
	    (label :text "G")
	 )
	 (box :orientation "v" :space-evenly false :valign "start" 
	    (scale :orientation "v" :flipped true :min 0 :max 16 :value "${MEMORY}" :tooltip "${MEMORY}")
	    (label :text "M")
	 )
	 (box :orientation "v" :space-evenly false :valign "start" 
	    (scale :orientation "v" :flipped true :min 0 :max 100 :value "${BATTERY}" :tooltip "${BATTERY}")
	    (label :text "B")
	 )
      )
   )
)
	 
(defwidget volume[]  
   (box :orientation "v" :space-evenly false :class "slider"
	 (box :orientation "v" :class "scroll_line" 
	    (scale :orientation "v" 
		  :tooltip "${current_volume}" 
		  :min 0 
		  :max 101
		  :flipped true
		  ;;:value "${current_volume}" *[100%]? needs flat int
		  :value 100
		  :onchange "${VOLUPDATE}"
	    )
	 )
      (button :class "slider_button" :onclick "${VOLCLICK}" (label :valign "end" :text "${VOLUME_ICON}") )
   )
)

(defwidget brightness[]  
   (box :orientation "v" :space-evenly false :class "slider"
	 (box :orientation "v" :class "scroll_line" 
	    (scale :orientation "v" 
		  :tooltip "${current_bri}" 
		  :min 0
		  :max 101
		  :flipped true
		  :value "${current_bri}" 
		  :onchange "${BRIUPDATE}"
	    )
	 )
      (button :class "slider_button" (label :text "${BRIGHTNESS_ICON}" ))
      
   )
)


(defwidget filemanager[] 
    (box :class "filemanager" :orientation "v" :space-evenly false
	 (box :class "icon" :orientation "h" 
	    (label :text "󰋊  " :halign "end" )  
	    (label :text "${DISKUSAGE}" :halign "start")
	 )
	 (box :orientation "v" :class "folders" :valign "end" 
	    (box :orientation "h" :halign "baseline"
	       (label :text "" :xalign 0.4)
	       (button :onclick "${PICTURES}" "~/pictures")
	    )
	    (box :orientation "h" :halign "baseline"
	       (label :text "" :xalign 0.4)
	       (button :onclick "#{CONFIGS}" "~/.config" )
	    )
	    (box :orientation "h" :halign "baseline"
	       (label :text "" :xalign 0.4)
	       (button :onclick "${DOWNLOADS}" "~/dowloads" )
	    )
	    (box :orientation "h" :halign "baseline"
	       (label :text "" :xalign 0.4)
	       (button :onclick "${DEVELOPMENT}" "~/development" )
	    )
	    (box :orientation "h" :halign "baseline"
	       (label :text "" :xalign 0.4)
	       (button :onclick "${PERSONAL}" "~/personal" )
	    )
	 )
    )
)



(defwidget shortcuts[]
   (box :class "shortcuts" :orientation "v"
      (button :onclick "${BROWSER}" 	"") 
      (button :onclick "${TMUX}" 	"") 
      (button :onclick "${STATUS}" 	"") 
      (button :onclick "${GITHUB}" 	"") 
      (button :onclick "${VPN}" 	"󰒃") 
      (button :onclick "${TURBO}" 	"󱐋") 
   )
)

(defwidget power_strip[] 
    (box :class "power" :orientation "v" :space-evenly true   
	 (button :onclick "${SHUTDOWN}"  "")
	 (button :onclick "${RESTART}"   "")
	 (button :onclick "${SLEEP}"     "")
	 (button :onclick "${SIGNOUT}"   "")
      )
)

