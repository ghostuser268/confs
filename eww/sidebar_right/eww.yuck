;;WINDOW MANAGER HYPRLAND
(deflisten window :initial "..." "./scripts/wayland/get-window-title.sh")
(deflisten workspaces :initial "[]" "./scripts/wayland/get-workspaces.sh")
(deflisten current_workspace :initial "1" "./scripts/wayland/get-active-workspace.sh")

;;ICONS
(defvar ARCH_ICON 			"")
(defvar KEYBOARD_ICON 	"")
(defvar BRIGHTNESS_ICON "󰃞")
(defvar VOLUME_ICON 		"󰕾")
(defvar POWER_ICON 			"")
(defvar RESTART_ICON 		"")
(defvar SLEEP_ICON 			"")
(defvar SIGNOUT_ICON 		"")
(defvar WIFI_ICON 			"󰖩")	
(defvar NETDOWN_ICON 		"")
(defvar NETUP_ICON 			"")
(defvar USER_ICON 			"")
(defvar SHELL_ICON 			"󰨊")
(defvar KERNEL_ICON 		"󰬒")
(defvar PACKAGES_ICON 	"")
(defvar UPTIME_ICON 		"󰥔")
(defvar MEM_ICON 				"󰍛")
(defvar BAT_ICON 				"󱊣")
(defvar TEMP_ICON 			"󰔄")
(defvar DISK_ICON 			"󰋊")
(defvar BROWSER_ICON 		"")
(defvar TMUX_ICON 			"")
(defvar STATUS_ICON 		"")
(defvar GITHUB_ICON 		"")
(defvar PROXY_ICON 			"󰒃")
(defvar TURBO_ICON 			"󱐋")
(defvar FOLDER_ICON 		"")

;;STATUS
(defpoll WIFI_NAME 				:interval "60s" "nmcli | awk '/wlp1s0/{print $4}'")
(defpoll CURRENT_VOL 			:interval "1s"  "amixer -c 1 sget Master | awk '/Mono/ {printf $4}' | tr -d '\[%\]'" )
(defpoll DISKPERC 				:interval "60s" "./scripts/stats.sh disk_perc"			)
(defpoll MEMORY 					:interval "1s"  "./scripts/stats.sh memory single"	)
(defpoll CURRENT_BATTERY 	:interval "60s" "./scripts/stats.sh battery"				)
(defpoll BATTERY_STATUS		:interval "60s" "./scripts/stats.sh battery_status"	)
(defpoll CURRENT_BRI 			:interval "1s"  "xbacklight -get" 									)
(defpoll CPU							:interval "1s"  "./scripts/stats.sh cpu_temp"				)
(defpoll GPU							:interval "1s"  "./scripts/stats.sh gpu_temp"				)

;;TIME
(defpoll DAY 			:interval "86400s" `date +%d`)
(defpoll MONTH 		:interval "86400s" `date +%m`)
(defpoll YEAR 		:interval "86400s" `date +%y`)

(defpoll DATE 		:interval "86400s" `date +%M`)
(defpoll TIME 		:interval "1s" `date +%X`)
(defpoll HOUR 		:interval "1s" `date +%H`)
(defpoll MINUTES 	:interval "1s" `date +%M`)

;;SWITCHES
(defvar p false)
(defvar v false)
(defvar b false)
(defvar c false)
(defvar s false)

(defvar KEYBOARD_TOGGLED "./scripts/keyboard.sh --config ~/personal/confs/eww/sidebar_right")

(defvar NET_RIGHT_CLICK "st -e nmtui&")

(defvar BRI_UPDATE "sudo xbacklight -set {}")
(defvar BAT_RIGHT_CLICK "st -e battop&")


(defvar VOL_UPDATE "amixer -qc 1 set Master {}%")
(defvar VOL_LEFT_CLICK  "./scripts/volume.sh --config ~/personal/confs/eww/sidebar_right")
(defvar VOL_RIGHT_CLICK  "st -e alsamixer&")


(defwindow bar 
	 :monitor 0 
	 :geometry 
			(geometry 
				 :x "0%" 
				 :y "0%" 
				 :width "50px" 
				 :height "100%" 
				 :anchor "right center") 
				 :stacking "fg" 
				 :windowtype "dock" 
				 :exclusive true 
				 :wm-ignore false 
				 (bar))
(defwindow calendar 
	 :monitor 0 
	 :geometry 
			(geometry 
				 :x "0%" 
				 :y "0%" 
				 :width "12%" 
				 :height "15%" 
				 :anchor "bottom right") 
				 (cal))


(defwidget  bar []
	 (centerbox 
			:class "bar"
			:orientation "v" 
			:align "v"
			(box 
				 :class "top" 
				 (top))
			(box
				 :class "middle" 
				 (middle))
			(box 
				 :class "bottom" 
				 (bottom))
	 )
)

(defwidget top[]
	 (eventbox 
			:onscroll "./scripts/wayland/change-active-workspace.sh {} ${current_workspace}" 
			:class "workspaces-widget"
			(box 
				 :class "windows" 
				 :orientation "v" 
				 :space-evenly false 
				 :class "top" 
				 :halign "center"
				 (button	
						(label 
							 :class "logo" 
							 :xalign 0.1
							 :text "${ARCH_ICON}" ))
			(box 
				 :class "window" 
				 :halign "center" 
				 :vexpand true 
				 (label 
						:angle 270 
						:show_truncated true 
						:limit-width 40 
						:text "${window}")) 

  )
)
)
(defwidget middle[]
	 (box  
			:orientation "v"  
			;;(for workspace in workspaces 
			;;(eventbox 
			;;	 :onclick "hyprctl dispatch workspace ${workspace.id}" 
			;;	 (box 
			;;			:class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}" 
			;;	 (label 
			;; :text "${workspace.id}"))))
))

(defwidget bottom[]
 (box  
	 :orientation "v" 
	 :valign "end" 
	 :space-evenly false  
	 :class "status"

	 (box 
			(button 
				 :onclick "${KEYBOARD_TOGGLED}" 
				 (label 
						:xalign 0.45 
						:text "${KEYBOARD_ICON}")))

	 (box 
			(eventbox 
				 :onhover "${EWW_CMD} update v=true" 
				 :onhoverlost "${EWW_CMD} update v=false"
				 (box 
				 :tooltip "${CURRENT_VOL}%"
				 :orientation "v"  
				 :space-evenly false
						(revealer 
							 :transition "slideup" 
							 :reveal v 
							 :duration "550ms"
							 (scale 
									:orientation "v" 
									:tooltip "${CURRENT_VOL}" 
									:min 0 
									:max 100 
									:flipped true 
									:value "${CURRENT_VOL}" 
									:onchange "${VOL_UPDATE}"))
						(button 
							 :class "slider_button" 
							 :class "icon" 
							 :onclick "${VOL_LEFT_CLICK}"  
							 :onrightclick "${VOL_RIGHT_CLICK}" "${VOLUME_ICON}") )))
	 (box 
			(eventbox 
				 :onhover "${EWW_CMD} update b=true" 
				 :onhoverlost "${EWW_CMD} update b=false"
				 :tooltip "${CURRENT_BRI}%" 
				 (box 
						:orientation "v" 
						:space-evenly false
						(revealer 
							 :transition "slideup" 
							 :reveal b 
							 :duration "550ms"
							 (scale 
									:orientation "v" 
									:min 0 
									:max 101 
									:flipped true 
									:value "${CURRENT_BRI}" 
									:onchange "${BRI_UPDATE}"))
						(label 
							 :xalign 0.45
							 :text "${BRIGHTNESS_ICON}" 
							 :class "icon" 
							 :tooltip "${CURRENT_BRI}"))))


	 (box 
			:class "wifi icon" 
			:tooltip "${WIFI_NAME} - ${round(EWW_NET['wlp1s0'].NET_DOWN / 1000000, 2)}Mb"
				 (button
						:onrightclick "${NET_RIGHT_CLICK}"
						(label 
							 :xalign 0.45
							 :text "${WIFI_ICON}")))

	 (box 
			:tooltip "${BATTERY_STATUS} - ${CURRENT_BATTERY}%"
			:class "battery icon" 
			(button :onrightclick "${BAT_RIGHT_CLICK}"
				 (label 
						:xalign 0.48
						:class "battery_icon"
						:text "${BAT_ICON}" )))
			(box 
				 :class "time"
				 (button 
						:onclick {c == false ? "${EWW_CMD} open calendar; ${EWW_CMD} update c=true" : "${EWW_CMD} close calendar; ${EWW_CMD} update c=false" }
						(box 
							 :orientation "v"
							 (label 
									:text "${HOUR}") 
							 (label 
									:text "${MINUTES}"))))
))


(defwidget cal[] 
	 (box 
			:class "cal-box" 
			:orientation "v" 
			(box 
				 :class "cal-inner-box" 
				 (calendar 
						:class "cal" 
						:day calendar_day 
						:month calendar_month 
						:year calendar_year))))

(defpoll calendar_day 
	 :interval "10h" "date '+%d'")
(defpoll calendar_month 
	 :interval "10h" "scripts/calendar")
(defpoll calendar_year 
	 :interval "10h" "date '+%Y'")

